// <auto-generated />
using System;
using FirstPage.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FirstPage.Migrations
{
    [DbContext(typeof(MohamedContext))]
    partial class MohamedContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FirstPage.Models.GET_ENTRY_SETTINGResult", b =>
                {
                    b.Property<bool>("ACCEPT_DIST_ACC")
                        .HasColumnType("bit");

                    b.Property<string>("ACCOUNTCODE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCOUNT CODE");

                    b.Property<string>("ACCOUNTNAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ACCOUNT NAME");

                    b.Property<int>("ACC_COLOR")
                        .HasColumnType("int");

                    b.Property<byte>("ACC_INDEX")
                        .HasColumnType("tinyint");

                    b.Property<short>("ACC_WIDTH")
                        .HasColumnType("smallint");

                    b.Property<bool>("AUTO_POSTING")
                        .HasColumnType("bit");

                    b.Property<int>("COST_CENTER_COLOR")
                        .HasColumnType("int");

                    b.Property<byte>("COST_CENTER_INDEX")
                        .HasColumnType("tinyint");

                    b.Property<short>("COST_CENTER_WIDTH")
                        .HasColumnType("smallint");

                    b.Property<int>("CREDIT_COLOR")
                        .HasColumnType("int");

                    b.Property<byte>("CREDIT_INDEX")
                        .HasColumnType("tinyint");

                    b.Property<short>("CREDIT_WIDTH")
                        .HasColumnType("smallint");

                    b.Property<string>("CURRENCYCODE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CURRENCY CODE");

                    b.Property<string>("CURRENCY_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DEBIT_COLOR")
                        .HasColumnType("int");

                    b.Property<byte>("DEBIT_INDEX")
                        .HasColumnType("tinyint");

                    b.Property<short>("DEBIT_WIDTH")
                        .HasColumnType("smallint");

                    b.Property<string>("ENTRYTYPENAME")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ENTRY TYPE NAME");

                    b.Property<int?>("ENTRY_ACC_ID")
                        .HasColumnType("int");

                    b.Property<string>("ENTRY_SETTING_AR_ABRV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ENTRY_SETTING_AR_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ENTRY_SETTING_EN_ABRV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ENTRY_SETTING_EN_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ENTRY_SETTING_ID")
                        .HasColumnType("smallint");

                    b.Property<byte>("NUMBEROFCOPIES")
                        .HasColumnType("tinyint");

                    b.Property<bool>("PRINT_AS_RESET")
                        .HasColumnType("bit");

                    b.Property<int>("REMARKS_COLOR")
                        .HasColumnType("int");

                    b.Property<byte>("REMARKS_INDEX")
                        .HasColumnType("tinyint");

                    b.Property<short>("REMARKS_WIDTH")
                        .HasColumnType("smallint");

                    b.Property<bool>("SHOW_THE_LAST_BALANCE")
                        .HasColumnType("bit");

                    b.ToView(null);
                });

            modelBuilder.Entity("FirstPage.Models.Get_New_Entry_NumberResult", b =>
                {
                    b.Property<long?>("COLLECT_ENTRY_CODE")
                        .HasColumnType("bigint");

                    b.Property<string>("ENTRY_NUMBER")
                        .HasColumnType("nvarchar(max)");

                    b.ToView(null);
                });

            modelBuilder.Entity("FirstPage.Models.SELECT_ALL_CURRENCIESResult", b =>
                {
                    b.Property<string>("CURRENCY_AR_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CURRENCY_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CURRENCY_EN_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CURRENCY_FIXED_RATE")
                        .HasColumnType("float");

                    b.Property<short>("CURRENCY_ID")
                        .HasColumnType("smallint");

                    b.Property<double>("CURRENCY_RATE")
                        .HasColumnType("float");

                    b.Property<string>("CURRENCY_SUB_AR_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CURRENCY_SUB_EN_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("SUB_TO_CURRENCY_TRANS")
                        .HasColumnType("smallint");

                    b.ToView(null);
                });
#pragma warning restore 612, 618
        }
    }
}
